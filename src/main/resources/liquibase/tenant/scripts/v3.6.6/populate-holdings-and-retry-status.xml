<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
    http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd">

  <changeSet id="MODKBEKBJ-556@@create-get-single-credentials-id-function" author="psmagin">
    <createProcedure>
      CREATE OR REPLACE FUNCTION ${database.defaultSchemaName}.get_single_credentials_id()
        RETURNS uuid AS $$
      DECLARE
        rowCount int;
      BEGIN
        rowCount = (SELECT count(*) FROM ${database.defaultSchemaName}.kb_credentials);

        IF rowCount = 1 THEN
          RETURN (SELECT id FROM ${database.defaultSchemaName}.kb_credentials);
        ELSE
          RAISE EXCEPTION 'Single credentials record expected but % found', rowCount;
        END IF;
      END;
      $$ LANGUAGE 'plpgsql';
    </createProcedure>
  </changeSet>

  <changeSet id="MODKBEKBJ-680@@add-unique-constraint-for-credentialsid-in-retry-status" author="psmahin">
    <preConditions onFail="MARK_RAN"
                   onFailMessage="[WARN] Unique constraint already exist: unq_retry_status_credentialsid">
      <sqlCheck expectedResult="0">
        SELECT COUNT(1) from pg_constraint
        WHERE conname = 'unq_retry_status_credentialsid'
        AND contype = 'u'
        AND conrelid = '${database.defaultSchemaName}.retry_status'::regclass;
      </sqlCheck>
    </preConditions>
    <addUniqueConstraint
      constraintName="unq_retry_status_credentialsid"
      tableName="retry_status"
      columnNames="credentials_id"
      schemaName="${database.defaultSchemaName}"
      deferrable="false"/>
  </changeSet>

  <changeSet id="MODKBEKBJ-680@@drop-holdings-status-lock-key" author="psmahin">
    <preConditions onFail="MARK_RAN" onFailMessage="[WARN] Unique constraint doesn't exist: holdings_status_lock_key">
      <sqlCheck expectedResult="1">
        SELECT COUNT(1) from pg_constraint
        WHERE conname = 'holdings_status_lock_key'
        AND contype = 'u'
        AND conrelid = '${database.defaultSchemaName}.holdings_status'::regclass;
      </sqlCheck>
    </preConditions>
    <dropUniqueConstraint
      tableName="holdings_status"
      constraintName="holdings_status_lock_key"
      schemaName="${database.defaultSchemaName}"/>
  </changeSet>

  <changeSet id="MODKBEKBJ-680@@drop-unq-holdings-status-credentialsid-lock" author="psmahin">
    <preConditions onFail="MARK_RAN"
                   onFailMessage="[WARN] Unique constraint doesn't exist: unq_holdings_status_credentialsid_lock">
      <sqlCheck expectedResult="1">
        SELECT COUNT(1) from pg_constraint
        WHERE conname = 'unq_holdings_status_credentialsid_lock'
        AND contype = 'u'
        AND conrelid = '${database.defaultSchemaName}.holdings_status'::regclass;
      </sqlCheck>
    </preConditions>
    <dropUniqueConstraint tableName="holdings_status"
                          constraintName="unq_holdings_status_credentialsid_lock"
                          schemaName="${database.defaultSchemaName}"/>
  </changeSet>

  <changeSet id="MODKBEKBJ-680@@drop-holdings-status-lock-check" author="psmahin">
    <preConditions onFail="MARK_RAN" onFailMessage="[WARN] Check constraint doesn't exist: holdings_status_lock_check">
      <sqlCheck expectedResult="1">
        SELECT COUNT(1) from pg_constraint
        WHERE conname = 'holdings_status_lock_check'
        AND contype = 'c'
        AND conrelid = '${database.defaultSchemaName}.holdings_status'::regclass;
      </sqlCheck>
    </preConditions>
    <sql>
      ALTER TABLE ${database.defaultSchemaName}.holdings_status DROP CONSTRAINT holdings_status_lock_check;
    </sql>
  </changeSet>

  <changeSet id="MODKBEKBJ-680@@add-unique-constraint-for-credentialsid-in-holdings-status" author="psmahin">
    <preConditions onFail="MARK_RAN"
                   onFailMessage="[WARN] Unique constraint already exist: unq_holdings_status_credentialsid">
      <sqlCheck expectedResult="0">
        SELECT COUNT(1) from pg_constraint
        WHERE conname = 'unq_holdings_status_credentialsid'
        AND contype = 'u'
        AND conrelid = '${database.defaultSchemaName}.holdings_status'::regclass;
      </sqlCheck>
    </preConditions>
    <addUniqueConstraint
      constraintName="unq_holdings_status_credentialsid"
      tableName="holdings_status"
      columnNames="credentials_id"
      schemaName="${database.defaultSchemaName}"
      deferrable="false"/>
  </changeSet>

  <changeSet id="MODKBEKBJ-556@@save-status-not-started-for-dummy-credentials" author="psmagin" runOnChange="true">
    <sql>
      INSERT INTO ${database.defaultSchemaName}.holdings_status(id, jsonb, lock, process_id, credentials_id)
	    SELECT id,
	    		'{
	    			"data": {
	    				"type": "status",
	    				"attributes": {
	    					"errors": [],
	    					"status": {
	    						"name": "Not Started"
	    					}
	    				}
	    			},
	    			"jsonapi": {
	    				"version": "1.0"
	    			}
	    		}'
	    		, 'true',
          id,
	    		id
      FROM ${database.defaultSchemaName}.kb_credentials
      ON CONFLICT DO NOTHING;
    </sql>
  </changeSet>

  <changeSet id="MODKBEKBJ-556@@save-retry-status-for-dummy-credentials" author="psmagin" runOnChange="true">
    <sql>
      INSERT INTO ${database.defaultSchemaName}.retry_status(id, attempts_left, credentials_id)
      SELECT id, 5, id
      FROM ${database.defaultSchemaName}.kb_credentials
      ON CONFLICT DO NOTHING;
    </sql>
  </changeSet>

  <changeSet id="MODKBEKBJ-556@@drop-get-single-credentials-id-function" author="psmagin">
    <sql>
      DROP FUNCTION IF EXISTS ${database.defaultSchemaName}.get_single_credentials_id();
    </sql>
  </changeSet>

</databaseChangeLog>
